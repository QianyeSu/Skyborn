name: Build and publish wheels

on:
  push:
    branches: [main, dev] # Add dev branch for testing
    tags: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      reason:
        description: "Reason for manual trigger"
        required: false
        default: "Manual testing"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build_wheels:
    name: Build wheel ${{ matrix.python }}-${{ matrix.buildplat[1] }}
    runs-on: ${{ matrix.buildplat[0] }}
    strategy:
      fail-fast: false
      matrix:
        # Following NumPy's matrix pattern
        buildplat:
          - [ubuntu-22.04, manylinux_x86_64]
          # - [ubuntu-22.04, manylinux_aarch64]  # Temporarily disabled
          - [macos-13, macosx_x86_64] # Intel Mac
          - [macos-14, macosx_arm64] # Apple Silicon Mac
          - [windows-2022, win_amd64]
        python: ["cp39", "cp310", "cp311", "cp312"]
        # exclude:
        #   # Exclude problematic combinations if needed
        #   # - buildplat: [ubuntu-22.04, manylinux_aarch64]  # Temporarily disabled
        #   #   python: "cp39"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Set up QEMU for cross-compilation (ARM64 Linux) - Temporarily disabled
      # - name: Set up QEMU
      #   if: matrix.buildplat[1] == 'manylinux_aarch64'
      #   uses: docker/setup-qemu-action@v3
      #   with:
      #     platforms: arm64

      # Setup for macOS (following NumPy's approach)
      - name: Setup macOS
        if: startsWith(matrix.buildplat[0], 'macos')
        run: |
          # Use gfortran-13 like NumPy
          echo "FC=gfortran-13" >> "$GITHUB_ENV"
          echo "F77=gfortran-13" >> "$GITHUB_ENV"
          echo "F90=gfortran-13" >> "$GITHUB_ENV"

      # Setup for Linux (install gfortran in container)
      - name: Setup Linux environment
        if: startsWith(matrix.buildplat[1], 'manylinux')
        run: |
          # Set environment for Linux builds
          echo "CIBW_BEFORE_BUILD_LINUX=yum install -y gcc-gfortran || dnf install -y gcc-gfortran || echo 'gfortran install failed'" >> "$GITHUB_ENV"

      # Setup for Windows
      # - name: Setup Windows
      #   if: matrix.buildplat[1] == 'win_amd64'
      #   run: |
      #     # Set environment for Windows builds
      #     echo "CIBW_BEFORE_BUILD_WINDOWS=choco install -y mingw --no-progress && pip install delvewheel" >> "$GITHUB_ENV"
      #     echo "CIBW_REPAIR_WHEEL_COMMAND_WINDOWS=delvewheel repair -w {dest_dir} {wheel}" >> "$GITHUB_ENV"
      # Install delvewheel for Windows builds
      - name: Setup Windows Fortran (msys2)
        if: matrix.buildplat[1] == 'win_amd64'
        run: |
          choco install -y msys2
          C:\tools\msys64\usr\bin\bash -lc "pacman -Sy --noconfirm mingw-w64-x86_64-gcc-fortran"
          echo "C:\tools\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          pip install delvewheel

      - name: Validate matrix combination
        shell: bash
        run: |
          echo "Python: ${{ matrix.python }}"
          echo "Build platform: ${{ matrix.buildplat[1] }}"
          echo "CIBW_BUILD would be: ${{ matrix.python }}-${{ matrix.buildplat[1] }}"

          if [ -z "${{ matrix.python }}" ] || [ -z "${{ matrix.buildplat[1] }}" ]; then
            echo "Invalid matrix combination: python='${{ matrix.python }}', plat='${{ matrix.buildplat[1] }}'"
            exit 1
          fi

          # Check if the combination makes sense
          CIBW_BUILD="${{ matrix.python }}-${{ matrix.buildplat[1] }}"
          if [ "$CIBW_BUILD" = "-" ] || [ "$CIBW_BUILD" = "" ]; then
            echo "CIBW_BUILD would be empty or invalid: '$CIBW_BUILD'"
            exit 1
          fi

          echo "Matrix combination is valid"

      # Use different cibuildwheel versions for different platforms
      - name: Build wheels (Windows)
        if: matrix.buildplat[1] == 'win_amd64'
        # uses: pypa/cibuildwheel@v2.21.3
        uses: pypa/cibuildwheel@95d2f3a92fbf80abe066b09418bbf128a8923df2 # v3.0.1
        with:
          output-dir: wheelhouse
        env:
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[1] }}
          CIBW_SKIP: "*-win32 *-musllinux*"
          CIBW_BEFORE_BUILD_WINDOWS: pip install meson ninja
          CIBW_ENVIRONMENT_WINDOWS: FC=gfortran CC=gcc
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: delvewheel repair -w {dest_dir} {wheel}
          CIBW_TEST_COMMAND: python -c "import skyborn; print('Basic import test passed')"
          CIBW_BUILD_VERBOSITY: 1

      - name: Build wheels (macOS)
        if: startsWith(matrix.buildplat[1], 'macosx')
        uses: pypa/cibuildwheel@v2.16.2
        # uses: pypa/cibuildwheel@95d2f3a92fbf80abe066b09418bbf128a8923df2 # v3.0.1
        with:
          output-dir: wheelhouse
        env:
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[1] }}
          CIBW_SKIP: "*-win32 *-musllinux*"
          CIBW_ENVIRONMENT_MACOS: FC=gfortran-13 CC=gcc
          CIBW_TEST_COMMAND: python -c "import skyborn; print('Basic import test passed')"
          CIBW_BUILD_VERBOSITY: 1

      - name: Build wheels (Linux x86_64)
        if: matrix.buildplat[1] == 'manylinux_x86_64'
        uses: pypa/cibuildwheel@v2.21.3
        # uses: pypa/cibuildwheel@95d2f3a92fbf80abe066b09418bbf128a8923df2 # v3.0.1
        with:
          output-dir: wheelhouse
        env:
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[1] }}
          CIBW_SKIP: "*-win32 *-musllinux*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_BEFORE_BUILD_LINUX: yum install -y gcc-gfortran || dnf install -y gcc-gfortran || echo 'gfortran install failed'
          CIBW_ENVIRONMENT_LINUX: FC=gfortran CC=gcc
          CIBW_TEST_COMMAND: python -c "import skyborn; print('Basic import test passed')"
          CIBW_BUILD_VERBOSITY: 1

      # Build wheels (Linux aarch64) - Temporarily disabled
      # - name: Build wheels (Linux aarch64)
      #   if: matrix.buildplat[1] == 'manylinux_aarch64'
      #   uses: pypa/cibuildwheel@95d2f3a92fbf80abe066b09418bbf128a8923df2
      #   with:
      #     output-dir: wheelhouse
      #   env:
      #     CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[1] }}
      #     CIBW_SKIP: "*-win32 *-musllinux*"
      #     CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
      #     CIBW_BEFORE_BUILD_LINUX: dnf install -y gcc-gfortran || yum install -y gcc-gfortran || echo 'gfortran install failed'
      #     CIBW_ENVIRONMENT_LINUX: FC=gfortran CC=gcc
      #     CIBW_TEST_COMMAND: python -c "import skyborn; print('Basic import test passed on aarch64')"
      #     CIBW_BUILD_VERBOSITY: 1

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.python }}-${{ matrix.buildplat[1] }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Build sdist
        run: |
          python -m pip install --upgrade pip build
          python -m build --sdist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  # Publish to PyPI (only on tags)
  publish:
    name: Publish to PyPI
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Use trusted publishing
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*"
          path: dist-artifacts
          merge-multiple: true

      - name: Prepare dist directory
        run: |
          mkdir -p dist
          find dist-artifacts -name "*.whl" -exec cp {} dist/ \;
          find dist-artifacts -name "*.tar.gz" -exec cp {} dist/ \;
          ls -la dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # Option 1: Use API Token (set PYPI_API_TOKEN in GitHub Secrets)
          password: ${{ secrets.PYPI_API_TOKEN }}

          # Option 2: Use Trusted Publishing (pre-configure project trust on PyPI)
          # If using Trusted Publishing, remove the password line above

  # Test installation (multi-platform verification)
  test_install:
    name: Test installation on ${{ matrix.os }}
    needs: [build_wheels]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13]
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: "wheel-cp311-*"
          path: wheels
          merge-multiple: true

      - name: Install from wheel
        run: |
          pip install wheels/skyborn*.whl
          python -c "import skyborn; print('Wheel installation test passed on ${{ matrix.os }}')"
